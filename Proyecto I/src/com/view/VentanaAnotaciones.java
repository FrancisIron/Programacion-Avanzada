/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.view;

import com.modelo.Alumno;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.JOptionPane;
import static javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Gamer
 */
public class VentanaAnotaciones extends javax.swing.JFrame {

    /**
     * Creates new form VentanaAnotaciones
     */
    private VentanaCurso verC;
    private Alumno a;

    public VentanaAnotaciones(Alumno a, VentanaCurso verC) {
        this.a = a;
        this.verC = verC;
        initComponents();
        crearTabla();
		listeners();

    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
		
		
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        botonAnadir = new javax.swing.JButton();
        botonModificar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		
		jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        botonAnadir.setText("Añadir anotacion");
        botonAnadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAnadirActionPerformed(evt);
            }
        });

        botonModificar.setText("Modificar anotación");
        botonModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonModificarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(botonAnadir)
                        .addGap(18, 18, 18)
                        .addComponent(botonModificar))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonAnadir)
                    .addComponent(botonModificar))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
	
	private void botonAnadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAnadirActionPerformed
        String tipo = "";
        //if(jTable1.getSelectedRow()!=-1){
        String anotacion = JOptionPane.showInputDialog(null, "Ingrese motivo o razón de la anotación", "Ingresar anotación");
        if (anotacion != null) {
            tipo = (String) JOptionPane.showInputDialog(null, "¿Qué tipo de anotación es?", "TIPO", JOptionPane.QUESTION_MESSAGE, null, new Object[]{"Positiva", "Negativa"}, "Seleccione");
        }
        if (anotacion != null && tipo != null) {
            a.ingresarAnotacion(anotacion, tipo);
        }
        crearTabla();

        /**
         * } else { JOptionPane.showMessageDialog(null, "Selecione una
         * nota","Error",JOptionPane.ERROR_MESSAGE); }
         */
    }//GEN-LAST:event_botonAnadirActionPerformed
    private void botonModificarActionPerformed(java.awt.event.ActionEvent evt) {                                               
        String tipo = "";
        if (jTable1.getSelectedRow() != -1) {
            String anotacion = JOptionPane.showInputDialog(null, "Ingrese motivo o razón de la anotación", jTable1.getValueAt(jTable1.getSelectedRow(), 0));
            if (anotacion != null) {
                tipo = (String) JOptionPane.showInputDialog(null, "¿Qué tipo de anotación es?", "TIPO", JOptionPane.QUESTION_MESSAGE, null, new Object[]{"Positiva", "Negativa"}, "Seleccione");
            }
            if (anotacion != null && tipo != null) {
                a.modificarAnotaciones(jTable1.getSelectedRow(), anotacion, tipo);
            }
            
            crearTabla();
        } else {
            JOptionPane.showMessageDialog(null, "Selecione una anotación", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }                                               
    public void listeners(){
        this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                verC.setVisible(true);
                VentanaAnotaciones.this.dispose();
            }
        });
    }
    private void crearTabla() {
        String[] fila = new String[]{"Contenido", "Tipo"};
        String[][] columna = new String[a.getAnotaciones().size()][2];
        int cont = 0;
        for (int i = 0; i < a.getAnotaciones().size(); i++) {
            columna[cont][0] = a.getAnotaciones().get(i).getContenido();
            columna[cont][1] = a.getAnotaciones().get(i).getTipo();
            cont++;

        }
        jTable1.setModel(new DefaultTableModel(columna, fila));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton botonAnadir;
    private javax.swing.JButton botonModificar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
